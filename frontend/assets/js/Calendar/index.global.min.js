document.addEventListener('DOMContentLoaded', function() {
  // Espera a que el DOM esté completamente cargado
  document.getElementById('loading').style.display = 'none';
  document.getElementById('content').style.display = 'block';
});

toastr.options = {
  "closeButton": false,
  "debug": false,
  "newestOnTop": false,
  "progressBar": true,
  "positionClass": "toast-top-right",
  "preventDuplicates": false,
  "onclick": null,
  "showDuration": "300",
  "hideDuration": "1000",
  "timeOut": "5000",
  "extendedTimeOut": "1000",
  "showEasing": "swing",
  "hideEasing": "linear",
  "showMethod": "fadeIn",
  "hideMethod": "fadeOut",
  "iconClass": "toast-error"
};

document.addEventListener('DOMContentLoaded', function() {
  var calendarEl = document.getElementById('calendar');
  var eventModal = document.getElementById('eventModal');
  var form = document.getElementById('eventForm');
  var modalClose = document.getElementsByClassName('close')[0];

  var infoModal = document.getElementById('infoModal');
  var closeInfoModal = document.getElementsByClassName('close-info-modal')[0];

  var today = new Date().toISOString().split('T')[0]; // Fecha actual en formato YYYY-MM-DD

  var calendar = new FullCalendar.Calendar(calendarEl, {
    headerToolbar: {
      left: 'prev,next today',
      center: 'title',
      right: 'dayGridMonth,timeGridWeek,timeGridDay'
    },
    initialDate: today,
    locale: 'es',
    navLinks: true,
    selectable: true,
    selectMirror: true,
    select: function(arg) {
      var selectedDate = arg.startStr.split('T')[0];
      if (selectedDate < today) {
        // Si la fecha seleccionada es anterior a hoy, no hacer nada
        toastr.error("Error de selección", "No se pueden ingresar actividades anteriores a hoy");
        calendar.unselect(); // Desmarcar la selección
        return;
      }

      eventModal.style.display = 'flex';
      document.getElementById('startDate').value = formatDate(arg.startStr);
      let endDate = new Date(arg.endStr);
      
      // Restar un día si la fecha de inicio y fin son iguales
      if (arg.endStr.split('T')[0] === arg.startStr.split('T')[0]) {
        endDate.setDate(endDate.getDate() - 1);
      }
    
      document.getElementById('endDate').value = formatDate(endDate.toISOString());
      document.getElementById('startTime').value = formatTime(arg.startStr);
      document.getElementById('endTime').value = formatTime(arg.endStr);
    },    
    eventClick: function(arg) {
      // Mostrar el modal de información
      infoModal.style.display = 'flex';

      // Llenar la información del evento en el modal
      document.getElementById('eventTitle').textContent = arg.event.title;
      document.getElementById('eventStart').textContent = formatDate(arg.event.startStr) + ' ' + formatTimeInfo(arg.event.startStr);
      document.getElementById('eventEnd').textContent = formatDate(arg.event.endStr) + ' ' + formatTimeInfo(arg.event.endStr);
      document.getElementById('eventAllDay').textContent = arg.event.allDay ? 'Sí' : 'No';
      
      // Guardar el número de actividad en localStorage
      const activityId = arg.event.extendedProps.numero_actividad;
      localStorage.setItem('activityId', activityId);
    },
    editable: true,
    dayMaxEvents: true,
    events: [] // Inicialmente vacío, se cargará con la respuesta de la API
  });

  calendar.render();
  const token = getCookie('token');

  // Cargar eventos desde la API
  function loadEvents() {
    fetch(`${ENV.API_URL}/activity`, {
      method: 'GET',
      headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
      }
  })
      .then(response => response.json())
      .then(data => {
        const events = data.data.map(activity => {
          const start = new Date(activity.inicio_actividad);
          const end = new Date(activity.fin_actividad);

          const isAllDay = start.getUTCHours() === 0 && start.getUTCMinutes() === 0 && end.getUTCHours() === 0 && end.getUTCMinutes() === 0;

          let backgroundColor = '#0081cc';

          return {
            title: activity.nombre_actividad,
            start: start.toISOString().split('.')[0], // Ajustar al formato ISO sin milisegundos
            end: end.toISOString().split('.')[0],
            allDay: isAllDay,
            backgroundColor: backgroundColor,
            extendedProps: {
              numero_actividad: activity.numero_actividad
            }
          };
        });
        calendar.addEventSource(events);
      })
      .catch(error => 
        toastr.error("Eror de conexión", "Enlace con el servidor perdido actividades")
      );
  }

  loadEvents();

  function formatDate(dateStr) {
    return dateStr.split('T')[0];
  }

  function formatTime(dateStr) {
    return dateStr.split('T')[1] || '00:00:00';
  }

  function formatTimeInfo(dateStr) {
    const timePart = dateStr.split('T')[1];

    if (timePart) {
        return timePart.substring(0, 5); // Devuelve solo HH:mm
    } else {
        return '00:00'; // Valor por defecto en caso de no tener tiempo
    }
  }

  modalClose.onclick = function() {
    eventModal.style.display = 'none';
    form.reset();
  };

  closeInfoModal.onclick = function() {
    infoModal.style.display = 'none';
  };

  window.onclick = function(event) {
    if (event.target == eventModal) {
      eventModal.style.display = 'none';
      form.reset();
    }
    if (event.target == infoModal) {
      infoModal.style.display = 'none';
    }
  };
});

function getCookie(name) {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
}
